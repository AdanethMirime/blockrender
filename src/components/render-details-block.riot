<render-details-block>
    <file-drop
        id="block-top"
        on_drop={ drop }
        maintext="Top"></file-drop>
    <file-drop
        id="block-side"
        on_drop={ drop }
        maintext="Side"
        smalltext="Default: Top"></file-drop>
    <file-drop
        id="block-front"
        on_drop={ drop }
        maintext="Front"
        smalltext="Default: Side"></file-drop>
    
    <script>
        import { render_block } from "../blockrender";
        import * as riot from "riot";
        import FileDrop from "./file-drop.riot";
        
        riot.register("file-drop", FileDrop);
        riot.mount("file-drop");
        
        // I adore regex... lmao
        function process_name(name) {
            return name
                .replace(/^.|_./g, match => match.toUpperCase())
                .replace(/_top|_side|_front|_bottom|_middle|_/gi, "");
        }
        
        export default {
            onMounted() {
                this.state.block_faces = {};
            },
            
            drop(evnt, id) {
                let state = this.state;
                
                let reader = new FileReader();
                // Only one file per box pls
                if (evnt.dataTransfer.files.length > 0)
                    reader.readAsDataURL(evnt.dataTransfer.files[0]);
                
                let dataURL = evnt.dataTransfer.getData("text/url-list");
                
                reader.onload = function() {
                    let result = dataURL == "" ? reader.result : dataURL;
                    document.getElementById("outfilename").value = process_name(evnt.dataTransfer.files[0].name);
                    
                    switch (id) {
                        case "block-top":
                            state.block_faces = { top: result }
                            break;
                        case "block-side":
                            state.block_faces.side = result;
                            break;
                        case "block-front":
                            state.block_faces.front = result;
                            break;
                    }
                    
                    render_block(state.block_faces, document.getElementById("render-canvas"));
                };
            }
        }
    </script>
</render-details-block>
